# -*- coding: utf-8 -*-
"""stockwizard trained model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i1pejp9cg-9E3DvckHjGP0sZfm0UqIxL
"""

!pip install pandas numpy matplotlib seaborn scikit-learn tensorflow yfinance

import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# 📌 Step 1: Get User Input for Stock Symbol
stock_symbol = input("Enter stock symbol (e.g., AAPL, GOOG, TSLA): ").upper()

# 📌 Step 2: Fetch Stock Data
df = yf.download(stock_symbol, start="2013-01-01", end="2023-01-01")

# Handle invalid stock symbols
if df.empty:
    print("❌ Invalid stock symbol or no data available.")
    exit()

# 📌 Step 3: Plot Stock Prices
plt.figure(figsize=(12,6))
plt.plot(df['Close'], label=f"{stock_symbol} Closing Price")
plt.title(f"{stock_symbol} Stock Price History")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()

# 📌 Step 4: Data Preprocessing
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(df["Close"].values.reshape(-1,1))

# Split Data into Training & Testing
train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

# Function to Create Data Sequences
def create_dataset(data, time_step=50):
    X, Y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i+time_step), 0])
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 50
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# Reshape Data for LSTM
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# 📌 Step 5: Build LSTM Model
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(time_step, 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=25),
    Dense(units=1)
])

model.compile(optimizer="adam", loss="mean_squared_error")

# 📌 Step 6: Train the Model
model.fit(X_train, y_train, batch_size=16, epochs=30)

# 📌 Step 7: Make Predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# 📌 Step 8: Plot Predictions vs Actual Prices
plt.figure(figsize=(12,6))
plt.plot(df.index[-len(y_test):], scaler.inverse_transform(y_test.reshape(-1,1)), label="Actual Price", color="blue")
plt.plot(df.index[-len(y_test):], predictions, label="Predicted Price", color="red")
plt.legend()
plt.title(f"{stock_symbol} Stock Price Prediction using LSTM")
plt.xlabel("Date")
plt.ylabel("Price")
plt.show()

import keras.saving
keras.saving.save_model(model, "stock_model.keras")

from google.colab import files
files.download("stock_model.keras")